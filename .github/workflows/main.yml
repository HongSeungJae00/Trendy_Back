name: 백엔드 CI/CD 파이프라인

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
  workflow_dispatch:
    inputs:
      environment:
        description: '배포 환경 (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: trendy-backend 

jobs:
  build:
    name: 이미지 빌드 및 푸시
    runs-on: ubuntu-latest
    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: JDK 설정
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Gradle 빌드
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test
          
      - name: 환경 설정
        id: env-setup
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "ENV=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "ENV=prod" >> $GITHUB_OUTPUT
          else
            echo "ENV=dev" >> $GITHUB_OUTPUT
          fi
          
          if [ "${{ steps.env-setup.outputs.ENV }}" == "prod" ]; then
            echo "ECR_REPOSITORY=prod/trendy-backend" >> $GITHUB_ENV
          else
            echo "ECR_REPOSITORY=trendy-backend" >> $GITHUB_ENV
          fi
        
      - name: AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: 이미지 태그 설정
        id: image-tag
        run: |
          VERSION=$(echo ${{ github.sha }} | cut -c1-7)
          echo "VERSION=$VERSION"
          echo "tag=$VERSION" >> $GITHUB_OUTPUT
      
      - name: WAR 파일 위치 확인
        run: |
          WAR_FILE=$(find build/libs -name "*.war" | head -n 1 || echo "")
          if [ -z "$WAR_FILE" ]; then
            echo "WAR 파일을 찾을 수 없습니다."
            exit 1
          fi
          echo "WAR 파일: $WAR_FILE"
          echo "WAR_PATH=$WAR_FILE" >> $GITHUB_ENV
      
      - name: Docker 빌드 및 푸시
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.image-tag.outputs.tag }}
        run: |
          # Dockerfile 작성
          cat > Dockerfile << EOF
          FROM tomcat:10-jre17-temurin
          RUN rm -rf /usr/local/tomcat/webapps/*
          COPY ${WAR_PATH} /usr/local/tomcat/webapps/ROOT.war
          EXPOSE 8080
          CMD ["catalina.sh", "run"]
          EOF
          
          echo "이미지 빌드 중: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    outputs:                                                         # Job Output 정의
      image_tag: ${{ steps.image-tag.outputs.tag }}              # Image Tag 정보 출력
      sha: ${{ github.sha }} 
    
  deploy:                                                            # Deploy Job 영역 시작
    needs: build                                                     # Build Job 완료 후 Deploy Job 수행
    name: Helm Chart Update                                          # 이름 지정
    runs-on: ubuntu-latest                                           # Runner 지정 ( Job-Container )
    env:                                                             # Deploy Job 환경변수 정의
      IMAGE_TAG: ${{ needs.build.outputs.image_tag }}                # Build Job에서 정의한 Outputs image_tag를 이용하여 IMAGE_TAG 환경변수 정의
      GIT_ACCESS_TOKEN: ${{ secrets.GIT_HUB_TOKEN }}                 # GIT_HUB_TOKEN Secrets 환경변수
      HASH: ${{ needs.build.outputs.sha }}                           # Build Job에서 정의한 Outputs sha를 이용하여 HASH 환경변수 정의
      GIT_REPO: sophist1420/Trendy_Kubernetes			                   # Helm Chart Repo 주소 ( 주소가 아닌 Repo의 Owner/Name 형식으로 작성 )
    
    steps:
      - name: Clone Deploy repository                                # 위에서 정의 된 환경변수를 활용하여 Helm Chart Repo Clone
        uses: actions/checkout@v2                                    # Checkout Action 사용
        with:
          repository: ${{ env.GIT_REPO }}                            # Helm Chart Repo 지정
          ref: 'main'                                                # Main Branch 지정
          token: ${{ env.GIT_ACCESS_TOKEN }}                         # GitHub Access Token 지정
      
      - name: Image Tag Change                                       # Clone 된 Helm Chart Repo Image Tag 변경
        uses: mikefarah/yq@v4.9.6                                    # mikefarah/yq@v4.9.6 Action 사용
        with:                                                        # values.yaml -> ".image.tag"를 찾아 변경 된 Tag로 Replace
          cmd: yq e --inplace '.image.tag = "${{ env.IMAGE_TAG }}"' charts/back/values.yaml
      
      - name: Create Pull Request                                    # Helm Chart Repo Pull Request 생성 
        uses: peter-evans/create-pull-request@v3                     # peter-evans/create-pull-request Action 사용
        with:
          title: 'deploy: Back-${{ env.HASH }}'                    # Pull Request 작업 이름
          token: ${{ env.GIT_ACCESS_TOKEN }}                         # GitHub Access Token 지정
          base: main                                                 # Pull Request를 요청 할 Branch 지정 ( Helm Chart Repo )
          branch: Back-${{ env.HASH }}                       	     # 변경 작업을 수행 할 Branch 지정 ( Action을 수행하는 곳애서 Branch 생성 )
          commit-message: 'deploy: Back-${{ env.HASH }}'            # Commit Message 지정
          labels: |                                                  # Pull Request Label 지정
            automerge
      
      # - name: 인프라 저장소 업데이트 트리거
      #   uses: peter-evans/repository-dispatch@v2
      #   with:
      #     token: ${{ secrets.GIT_HUB_TOKEN }}
      #     repository: sophist1420/Trendy_Kubernetes
      #     event-type: update-backend-image
      #     client-payload: '{"image_tag": "${{ steps.image-tag.outputs.tag }}", "environment": "${{ steps.env-setup.outputs.ENV }}", "repo": "${{ env.ECR_REPOSITORY }}"}'
