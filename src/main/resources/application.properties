spring.application.name=Back

# Server port 설정
server.port=8080

# MySQL 설정
spring.datasource.url=jdbc:mysql://db-trendy.cluster-cl8m86kw0hrn.ap-northeast-2.rds.amazonaws.com:3306/trendy
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PW}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA 설정
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# Session Timeout 설정
server.servlet.session.timeout=30m

# Redis 설정
spring.redis.host=master.trendy-redis-cluster-001-001.5ihawr.apn2.cache.amazonaws.com
spring.redis.port=6379
spring.session.store-type=redis
spring.session.timeout=1800s

# OAuth2 Client Registration (Kakao)
spring.security.oauth2.client.registration.kakao.client-id=${KAKAO_ID}
spring.security.oauth2.client.registration.kakao.redirect-uri=https://api.trendy.kg.kr/login/oauth2/code/kakao
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.scope=profile_nickname,profile_image, account_email

# OAuth2 Provider (Kakao)
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id

# OAuth2 Client Registration (Google)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_SECRET}
spring.security.oauth2.client.registration.google.redirect-uri=https://api.trendy.kg.kr/login/oauth2/code/google
spring.security.oauth2.client.registration.google.scope=email,profile

# OAuth2 Provider (Google)
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

# OAuth2 Client Registration (Naver)
spring.security.oauth2.client.registration.naver.client-id=${NAVER_ID}
spring.security.oauth2.client.registration.naver.client-secret=${NAVER_PW}
spring.security.oauth2.client.registration.naver.redirect-uri=https://api.trendy.kg.kr/login/oauth2/code/naver
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=email,nickname,profile_image

# OAuth2 Provider (Naver)
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

# Thymeleaf 설정
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

# Spring Security 로그 설정
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.mail=DEBUG
logging.level.org.springframework.web.filter=DEBUG
logging.level.org.springframework.web.servlet=DEBUG
logging.level.org.springframework.web.client.RestTemplate=DEBUG

# PortOne 설정
portone.store-id=${PORTONE_STORE_ID}
portone.client-id=${PORTONE_CLIENT_ID}
portone.rest-api-key=${PORTONE_RESTAPI_KEY}
portone.rest-api-secret=${PORTONE_RESTAPI_SECRET}
portone.v2-secret=${PORTONE_V2_SECRET}
portone.webhook-secret=${PORTONE_WEBHOOK_SECRET}

# 각 결제 수단의 채널 키
portone.kakaopay.channel-key=${KAKAOPAY_KEY}
portone.tosspay.channel-key=${TOSSPAY_KEY}
portone.paypal.channel-key=${PAYPAL_KEY}

# 메일전송
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=yoochang9660@gmail.com
spring.mail.password=${MAIL_PW}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.debug=true

# /CustomerCenter/QandA
spring.thymeleaf.cache=false
spring.jpa.properties.hibernate.format_sql=true

# JWT 설정
jwt.expiration=3600000


# 이미지 저장 경로 설정
upload.path=uploads
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB


# Actuator 설정 추가
management.endpoints.web.exposure.include=health,info,metrics
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true

# Actuator 보안 설정
management.endpoints.web.base-path=/actuator
management.endpoints.web.cors.allowed-origins=*
management.endpoints.web.cors.allowed-methods=GET,POST

# 데이터베이스 헬스 체크 설정
management.health.db.enabled=true
management.health.diskspace.enabled=true

# 로깅 설정 (actuator 관련)
logging.level.org.springframework.boot.actuate=DEBUG
